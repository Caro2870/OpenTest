package com.example.testing.service;


import com.example.testing.Domain.model.Postulant;
import com.example.testing.Domain.model.Professional;
import com.example.testing.Domain.repository.PostulantRepository;
import com.example.testing.Domain.repository.ProfessionalRepository;
import com.example.testing.Domain.service.PostulantService;
import com.example.testing.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.awt.print.Pageable;


@Service
public class PostulantServiceImpl implements PostulantService {

    @Autowired
    private PostulantRepository postulantRepository;

    @Autowired
    private ProfessionalRepository professionalRepository;



    @Override
    public Page<Postulant> getAllPostulantsByProfessionalId(Long professionalId, org.springframework.data.domain.Pageable pageable) {
        return postulantRepository.findByProfessionalId(professionalId,pageable);
    }

    @Override
    public Postulant getPostulantByIdAndProfessionalId(Long professionalId, Long postulantId) {
        return postulantRepository.findByIdAndProfessionalId(postulantId,professionalId)
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Postulant not found with Id" + postulantId +
                                " and ProfessionalId" + professionalId));

    }




    @Override
    public Postulant createPostulant(Long professionalId, Postulant postulant) {
        return professionalRepository.findById(professionalId).map(professional -> {
            postulant.setProfessional(professional);
            return postulantRepository.save(postulant);
    }).orElseThrow(()-> new ResourceNotFoundException(
            "Professional","Id", professionalId));
    }

    @Override
    public Postulant updatePostulant(Long professionalId, Long postulantId, Postulant postulantDetails) {
        if (!professionalRepository.existsById(professionalId))
            throw new ResourceNotFoundException("Professional", "Id", professionalId);
        return postulantRepository.findById(postulantId).map(postulant ->
        {
            postulant.setFirstName(postulantDetails.getFirstName());
            return postulantRepository.save(postulant);
        }).orElseThrow(() -> new ResourceNotFoundException(
                "Postulant","Id", postulantId));


    }

    @Override
    public ResponseEntity<?> deletePostulant(Long professionalId, Long postulantId) {
        if(!professionalRepository.existsById(professionalId))
            throw new ResourceNotFoundException("Professional","Id",professionalId);
        return postulantRepository.findById(postulantId).map(postulant -> {
            postulantRepository.delete(postulant);
            return ResponseEntity.ok().build();
         }).orElseThrow(()->new ResourceNotFoundException(
                 "Postulant","Id",postulantId));

    }
}
