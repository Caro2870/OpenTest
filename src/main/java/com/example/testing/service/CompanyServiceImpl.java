package com.example.testing.service;

import com.example.testing.Domain.model.Company;
import com.example.testing.Domain.model.Professional;
import com.example.testing.Domain.repository.CompanyRepository;
import com.example.testing.Domain.service.CompanyService;
import com.example.testing.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class CompanyServiceImpl implements CompanyService {

    @Autowired
    CompanyRepository companyRepository;


    @Override
    public Company getCompanyById(Long companyId) {
        return companyRepository.findById(companyId).orElseThrow(()->
                new ResourceNotFoundException("Company","Id",companyId));

    }

    @Override
    public Company createCompany(Company companyId) {
        return companyRepository.save(companyId);
    }

    @Override
    public Company updateCompany(Long companyId, Company companyDetails) {
        Company company = companyRepository.findById(companyId)
                .orElseThrow(() -> new ResourceNotFoundException("Company","Id",companyId));
                        company.setName(companyDetails.getName());
                return companyRepository.save(company);
    }

    @Override
    public ResponseEntity<?> deleteCompany(Long companyId) {
        Company company = companyRepository.findById(companyId)
                .orElseThrow(() ->new ResourceNotFoundException("Companny","Id",companyId));
        companyRepository.delete(company);
        return ResponseEntity.ok().build();
    }

    @Override
    public Page<Company> getAllCompanys(Pageable pageable) {
        return companyRepository.findAll(pageable);
    }
}
