package com.example.testing.service;

import com.example.testing.Domain.model.Professional;
import com.example.testing.Domain.repository.ProfessionalRepository;
import com.example.testing.Domain.service.ProfessionalService;
import com.example.testing.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;


@Service
public class ProfessionalServiceImpl implements ProfessionalService {
    @Autowired
    private ProfessionalRepository professionalRepository;

    @Override
    public Professional getProfessionalById(Long professionalId) {
        return professionalRepository.findById(professionalId)
                .orElseThrow(()->new ResourceNotFoundException("Professional","Id",professionalId));
    }

    @Override
    public Professional createProfessional(Professional professional) {
        return professionalRepository.save(professional);
    }

    @Override
    public Professional updateProfessional(Long professionalId, Professional professionalIdDetails) {
        Professional professional = professionalRepository.findById(professionalId)
                .orElseThrow(() -> new ResourceNotFoundException("Professional", "Id", professionalId));
        professional.setName(professionalIdDetails.getName());
        return professionalRepository.save(professional);

    }

    @Override
    public ResponseEntity<?> deleteProfessional(Long professionalId) {
        Professional professional = professionalRepository.findById(professionalId)
                .orElseThrow(()-> new ResourceNotFoundException("Professional", "Id", professionalId));
        professionalRepository.delete(professional);
        return ResponseEntity.ok().build();
    }

    @Override
    public Page<Professional> getAllProfessionalls(Pageable pageable) {
        return professionalRepository.findAll(pageable);
    }
}
