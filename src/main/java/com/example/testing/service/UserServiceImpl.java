package com.example.testing.service;

import com.example.testing.Domain.model.User;
import com.example.testing.Domain.repository.UserRepository;
import com.example.testing.Domain.service.UserService;
import com.example.testing.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.repository.NoRepositoryBean;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@NoRepositoryBean
@Service
public class UserServiceImpl implements UserService {
    @Autowired
    private UserRepository userRepository;

    @Override
    public Page<User> getAllUsers(Pageable pageable) {
        return userRepository.findAll(pageable);
    }

    @Override
    public User getUserById(Long userId) {
        return userRepository.findById(userId)
                .orElseThrow(()->new ResourceNotFoundException("User","Id",userId));
    }

    @Override
    public User createUser(User user) {
        return userRepository.save(user);
    }

    @Override
    public User updateUser(Long UserId, User userDetails) {
        User user = userRepository.findById(UserId)
                .orElseThrow(() -> new ResourceNotFoundException("User", "Id", UserId));
        user.setFirstName(userDetails.getFirstName());
        return userRepository.save(user);

    }

    @Override
    public ResponseEntity<?> deleteUser(Long userId) {
        User user=userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("User", "Id", userId));
        userRepository.delete(user);
        return ResponseEntity.ok().build();
    }


}
