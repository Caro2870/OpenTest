package com.example.testing.service;

import com.example.testing.Domain.model.Employeer;
import com.example.testing.Domain.model.Postulant;
import com.example.testing.Domain.repository.CompanyRepository;
import com.example.testing.Domain.repository.EmployeerRepository;
import com.example.testing.Domain.service.EmployeerService;
import com.example.testing.exception.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

@Service
public class EmployeerServiceImpl implements EmployeerService {

    @Autowired
    EmployeerRepository employeerRepository;
    @Autowired
    CompanyRepository companyRepository;

    @Override
    public Page<Employeer> getAllEmployeersByCompanyId(Long companyId, Pageable pageable) {
        return employeerRepository.findByCompanyId(companyId,pageable);
    }

    @Override
    public Employeer getEmployeerByIdAndCompanyId(Long companyId, Long employeerId) {
        return employeerRepository.findByIdAndCompany(employeerId,companyId)
                .orElseThrow(() -> new ResourceNotFoundException(
                        "Employeer not found with Id" + employeerId +
                                "and CompanyId" +companyId));

    }

    @Override
    public Employeer createEmployeer(Long companyId, Employeer employeer) {
        return companyRepository.findById(companyId).map(company -> {
            employeer.setCompany(company);
            return employeerRepository.save(employeer);
        }).orElseThrow(()-> new ResourceNotFoundException(
                "Company","Id", companyId));
    }

    @Override
    public Employeer updateEmployeer(Long companyId, Long employeerId, Employeer employeerDetails) {
        if (!companyRepository.existsById(companyId))
            throw new ResourceNotFoundException("Company", "Id", companyId);
        return employeerRepository.findById(employeerId).map(employeer ->
        {
            employeer.setFirstName(employeerDetails.getFirstName());
            return employeerRepository.save(employeer);
        }).orElseThrow(() -> new ResourceNotFoundException(
                "Employeer","Id", employeerId));
    }

    @Override
    public ResponseEntity<?> deleteEmployeer(Long companyId, Long employeerId) {

        if(!companyRepository.existsById(companyId))
            throw new ResourceNotFoundException("Company","Id",companyId);
        return employeerRepository.findById(companyId).map(employeer -> {
            employeerRepository.delete(employeer);
            return ResponseEntity.ok().build();
        }).orElseThrow(()->new ResourceNotFoundException(
                "Company","Id",employeerId));


    }
}
