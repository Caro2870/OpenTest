package com.example.testing.controller;

import com.example.testing.Domain.model.Postulant;
import com.example.testing.Domain.model.Professional;
import com.example.testing.Domain.service.PostulantService;
import com.example.testing.Domain.service.ProfessionalService;
import com.example.testing.resource.PostulantResource;
import com.example.testing.resource.ProfessionalResource;
import com.example.testing.resource.SavePostulantResource;
import com.example.testing.resource.SaveProfessionalResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;


@RestController
@RequestMapping("/api")
public class ProfessionalController {
    @Autowired
    private ProfessionalService professionalService;

    @Autowired
    private ModelMapper mapper;

    @GetMapping("/professionals")

    @Operation(summary = "Get Professionals", description = "Get All Professionals by Pages", tags
            = {"professionals"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "All Professionals returned", content = @Content(mediaType = "application/json"))})
    public Page<ProfessionalResource> getAllProfessional(Pageable pageable) {
        Page<Professional> professionalsPage = professionalService.getAllProfessionalls(pageable);
        List<ProfessionalResource> resources = professionalsPage.getContent()
                .stream()
                .map(this::convertToResource)
                .collect(Collectors.toList());

        return new PageImpl<>(resources, pageable, resources.size());
    }


    @Operation(summary = "Create Professional", description = "Permits the Insertion of a professional", tags = {"professional-create"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One professional created (the one entered)", content = @Content(mediaType = "application/json"))})
    @PostMapping("/professionals")
    public ProfessionalResource createProfessional(@Valid @RequestBody SaveProfessionalResource resource) {
        Professional professional = convertToEntity(resource);
        return convertToResource(professionalService.createProfessional(professional));
    }

    @Operation(summary = "Update professional", description = "Permits to update a professional", tags = {"professional-update"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One professional updated (according to the changed parameters)", content = @Content(mediaType = "application/json"))})
    @PutMapping("/professionals/{professionalId}")
    public ProfessionalResource updateProfessional(@PathVariable Long professionalId, @RequestBody SaveProfessionalResource resource) {
        Professional professional = convertToEntity(resource);
        return convertToResource(professionalService.updateProfessional(professionalId, professional));
    }

    @Operation(summary = "Delete postulant", description = "Permits to delete a postulant", tags = {"postulant-delete"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One professional deleted(according to the given id)", content = @Content(mediaType = "application/json"))})
    @DeleteMapping("/professionals/{professionalId}")
    public ResponseEntity<?> deleteProfessional(@PathVariable Long professionalId) {
        return professionalService.deleteProfessional(professionalId);
    }

    private Professional convertToEntity(SaveProfessionalResource resource) {
        return mapper.map(resource, Professional.class);
    }

    private ProfessionalResource convertToResource(Professional entity) {
        return mapper.map(entity, ProfessionalResource.class);
    }
}