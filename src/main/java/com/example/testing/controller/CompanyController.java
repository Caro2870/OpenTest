package com.example.testing.controller;

import com.example.testing.Domain.model.Company;
import com.example.testing.Domain.model.Professional;
import com.example.testing.Domain.service.CompanyService;
import com.example.testing.Domain.service.ProfessionalService;
import com.example.testing.resource.CompanyResource;
import com.example.testing.resource.ProfessionalResource;
import com.example.testing.resource.SaveCompanyResource;
import com.example.testing.resource.SaveProfessionalResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;



@RestController
@RequestMapping("/api")
public class CompanyController {
    @Autowired
    private CompanyService CompanyService;

    @Autowired
    private ModelMapper mapper;

    @GetMapping("/Companys")

    @Operation(summary = "Get Companys", description = "Get All Companys by Pages", tags
            = {"Companys"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "All Companys returned", content = @Content(mediaType = "application/json"))})
    public Page<CompanyResource> getAllCompany(Pageable pageable) {
        Page<Company> CompanysPage = CompanyService.getAllCompanys(pageable);
        List<CompanyResource> resources = CompanysPage.getContent()
                .stream()
                .map(this::convertToResource)
                .collect(Collectors.toList());

        return new PageImpl<>(resources, pageable, resources.size());
    }


    @Operation(summary = "Create Company", description = "Permits the Insertion of a Company", tags = {"Company-create"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One Company created (the one entered)", content = @Content(mediaType = "application/json"))})
    @PostMapping("/Companys")
    public CompanyResource createCompany(@Valid @RequestBody SaveCompanyResource resource) {
        Company company = convertToEntity(resource);
        return convertToResource(CompanyService.createCompany(company));
    }

    @Operation(summary = "Update Company", description = "Permits to update a Company", tags = {"Company-update"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One Company updated (according to the changed parameters)", content = @Content(mediaType = "application/json"))})
    @PutMapping("/Companys/{CompanyId}")
    public CompanyResource updateCompany(@PathVariable Long CompanyId, @RequestBody SaveCompanyResource resource) {
        Company Company = convertToEntity(resource);
        return convertToResource(CompanyService.updateCompany(CompanyId, Company));
    }

    @Operation(summary = "Delete employeer", description = "Permits to delete a employeer", tags = {"employeer-delete"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One Company deleted(according to the given id)", content = @Content(mediaType = "application/json"))})
    @DeleteMapping("/Companys/{CompanyId}")
    public ResponseEntity<?> deleteCompany(@PathVariable Long CompanyId) {
        return CompanyService.deleteCompany(CompanyId);
    }

    private Company convertToEntity(SaveCompanyResource resource) {
        return mapper.map(resource, Company.class);
    }

    private CompanyResource convertToResource(Company entity) {
        return mapper.map(entity, CompanyResource.class);
    }
}
