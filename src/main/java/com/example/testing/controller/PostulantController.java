package com.example.testing.controller;

import com.example.testing.Domain.model.Postulant;
import com.example.testing.Domain.service.PostulantService;
import com.example.testing.resource.PostulantResource;
import com.example.testing.resource.SavePostulantResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

import java.util.List;
import java.util.stream.Collectors;


@RestController
@RequestMapping("/api")
public class PostulantController {
    @Autowired
    private PostulantService postulantService;

    @Autowired
    private ModelMapper mapper;

    @GetMapping("/professional{professionalId}/Postulant")

    @Operation(summary = "Get Postulants", description = "Get All Postulants by Pages", tags = {"postulants"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "All Postulants returned", content = @Content(mediaType = "application/json"))})

    public Page<PostulantResource> getAllPostulantsByProffesionalId(@PathVariable Long professionalId, Pageable pageable) {
        Page<Postulant> postulantPage = postulantService.getAllPostulantsByProfessionalId(professionalId, pageable);
        List<PostulantResource> resources = postulantPage.getContent()
                .stream().map(
                        this::convertToResource).collect(Collectors.toList());
        return new PageImpl<>(resources, pageable, resources.size());
    }

    @GetMapping("/posts/{postId}/comments/{commentId}")
    public PostulantResource getPostulantByIdAndProfessionalId(@PathVariable Long professionalId, @PathVariable Long postulantId) {
        return convertToResource(postulantService.getPostulantByIdAndProfessionalId(professionalId, postulantId));
    }

    @Operation(summary = "Create Postulant", description = "Permits the Insertion of a tutor", tags = {"postulant-create"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One postulant created (the one entered)", content = @Content(mediaType = "application/json"))})

    @PostMapping("/professional/{professionalId}/postulants")
    public PostulantResource createPostulant(@PathVariable Long professionalId,@Valid @RequestBody SavePostulantResource resource)
    {

        return convertToResource(postulantService.createPostulant(professionalId,convertToEntity(resource)));
    }

    @Operation(summary = "Update postulant", description = "Permits to update a postulant", tags = {"postulant-update"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One postulant updated (according to the changed parameters)", content = @Content(mediaType = "application/json"))})
    @PutMapping("/professional/{professionalId}/postulant/{postulantId}")
    public PostulantResource updatePostulant(
            @PathVariable Long professionalId,
            @PathVariable Long postulantId,
            @Valid @RequestBody SavePostulantResource resource) {

        return convertToResource(postulantService.updatePostulant(professionalId,postulantId, convertToEntity(resource)));
    }

    @Operation(summary = "Delete postulant", description = "Permits to delete a postulant", tags = {"postulant-delete"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One postulant deleted(according to the given id)", content = @Content(mediaType = "application/json"))})
    @DeleteMapping("/professional/{professionalId}/postulant/{postulantId}")
    public ResponseEntity<?> deletePostulant(
            @PathVariable Long professionalId,
            @PathVariable Long postulantId) {
        return postulantService.deletePostulant(professionalId,postulantId);
    }

    private Postulant convertToEntity(SavePostulantResource resource) {
        return mapper.map(resource, Postulant.class);
    }

    private PostulantResource convertToResource(Postulant entity) {
        return mapper.map(entity, PostulantResource.class);
    }
}
