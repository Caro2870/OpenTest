
package com.example.testing.controller;


import com.example.testing.Domain.model.Employeer;
import com.example.testing.Domain.model.Postulant;
import com.example.testing.Domain.service.EmployeerService;
import com.example.testing.resource.EmployeerResource;
import com.example.testing.resource.PostulantResource;
import com.example.testing.resource.SaveEmployeerResource;
import com.example.testing.resource.SavePostulantResource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
public class EmployeerController {


    @Autowired
    private EmployeerService employeerService;

    @Autowired
    private ModelMapper mapper;

    @GetMapping("/company{companyId}/Employeer")
    @Operation(summary = "Get Employeer", description = "Get All Employeer by Pages", tags = {"employeers"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "All Employeers returned", content = @Content(mediaType =
            "application/json"))})

    public Page<EmployeerResource> getAllEmployeersByCompanyId(@PathVariable Long companyId, Pageable pageable) {
        Page<Employeer> employeerPage = employeerService.getAllEmployeersByCompanyId(companyId, pageable);
        List<EmployeerResource> resources = employeerPage.getContent()
                .stream().map(
                        this::convertToResource).collect(Collectors.toList());
        return new PageImpl<>(resources, pageable, resources.size());
    }

    @GetMapping("/companys/{companyId}/employeers/{employeerId}")
    public EmployeerResource getEmployeerByIdAndCompanyId(@PathVariable Long companyId, @PathVariable Long employeerId) {
        return convertToResource(employeerService.getEmployeerByIdAndCompanyId(companyId, employeerId));
    }


    @Operation(summary = "Create Employeer", description = "Permits the Insertion of a employeer", tags = {"employeer-create"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One employeer created (the one entered)", content = @Content(mediaType = "application/json"))})

    @PostMapping("/company/{companyId}/employeers")
    public EmployeerResource createEmployeer(@PathVariable Long companyId,@Valid @RequestBody SaveEmployeerResource resource)
    {

        return convertToResource(employeerService.createEmployeer(companyId,convertToEntity(resource)));
    }







    @Operation(summary = "Update employeer", description = "Permits to update a employeer", tags = {"employeer-update"})
    @ApiResponses( value = {
            @ApiResponse(responseCode = "200", description = "One employeer updated (according to the changed parameters)", content = @Content(mediaType = "application/json"))})
    @PutMapping("/company/{companyId}/employeer/{employeerId}")
    public EmployeerResource updateEmployeer(
            @PathVariable Long companyIdId,
            @PathVariable Long employeerId,
            @Valid @RequestBody SaveEmployeerResource resource) {

        return convertToResource(employeerService.updateEmployeer(companyIdId,employeerId, convertToEntity(resource)));
    }








    @Operation(summary = "Delete Employeer", description = "Permits to delete a employeer", tags = {"employeer-delete"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "One employeer deleted(acoording to the given Id", content =
            @Content(mediaType = "application/json"))})

    @DeleteMapping("/company/{companyId}/employeer/{employeerId}")

    public ResponseEntity<?> deleteEmployeer(@PathVariable Long companyId,@PathVariable Long employeerId){
        return employeerService.deleteEmployeer(companyId,employeerId);
    }



    private  Employeer convertToEntity(SaveEmployeerResource resource){
        return mapper.map(resource,Employeer.class);
    }

    private  EmployeerResource convertToResource(Employeer entity){
        return mapper.map(entity,EmployeerResource.class);
    }





}
